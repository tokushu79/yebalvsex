# -*- coding: utf-8 -*-
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.types.bot_command import BotCommand
from datetime import datetime, time
import pytz

# –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω
TOKEN = "7548603426:AAHNG1TGkBnz_cZQvEqfaFVfv1ieV-KGiTI"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_temp_data = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ (—Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
alarms = {}
time_zone = pytz.timezone("Asia/Tashkent")
active_alarm_index = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é

def create_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –Ø–Ω–≥–∏—Å–∏–¥–∞–Ω –±–æ–ª—Å–∏–Ω", callback_data="add_alarm")],
        [InlineKeyboardButton(text="üìú –†–æ–π—Ö–∞—Ç", callback_data="list_alarms")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –Å—Ä–¥–∞–º", callback_data="help")],
    ])

def create_repeat_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–∞–∫–∞—Ç —ç—Ä—Ç–∞–≥–∞", callback_data="repeat_once")],
        [InlineKeyboardButton(text="–•–∞—Ä –∫—É–Ω–∏", callback_data="repeat_everyday")],
        [InlineKeyboardButton(text="–î—É-—Å–µ-—á–æ—Ä-–ø–∞–π-–∂—É–º–∞", callback_data="repeat_weekdays")],
    ])

@dp.message(CommandStart())
async def start_command(message: types.Message):
    if message.from_user.id not in alarms:
        alarms[message.from_user.id] = []
    await message.answer(
        "–°–∞–ª–æ–º! –ú–µ–Ω —Å–∏–∑–Ω–∏ —É–π–≥–æ—Ç–∏—à–∏–º –∫–µ—Ä–∞–∫! üï∞\n\n"
        "–ú–µ–Ω—é–Ω–∏ –±–æ—à–∫–∞—Ä–∏—à —É—á—É–Ω –∏—à–ª–∞—Ç–∏–Ω–≥:",
        reply_markup=create_main_menu()
    )

@dp.callback_query(lambda callback: callback.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–µ–Ω—é–Ω–∏ –±–æ—à–∫–∞—Ä–∏—à —É—á—É–Ω –∏—à–ª–∞—Ç–∏–Ω–≥:",
        reply_markup=create_main_menu()
    )

@dp.callback_query(lambda callback: callback.data == "add_alarm")
async def add_alarm(callback: CallbackQuery):
    user_temp_data[callback.from_user.id] = {"step": "time"}
    await callback.message.answer("HH:MM —Ñ–æ—Ä–º–∞—Ç–¥–∞ –∫–µ—Ä–∞–∫–ª–∏ –≤–∞–∫—Ç–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")

@dp.message(lambda message: message.from_user.id in user_temp_data and user_temp_data[message.from_user.id]["step"] == "time")
async def set_alarm_time(message: types.Message):
    try:
        alarm_time = time.fromisoformat(message.text)
        user_temp_data[message.from_user.id]["time"] = alarm_time
        user_temp_data[message.from_user.id]["step"] = "repeat"
        await message.answer("–¢–∞–Ω–≥–ª–∞–Ω–≥:", reply_markup=create_repeat_buttons())
    except ValueError:
        await message.answer("‚ùó –ï–±–∞–Ω–º–∏—Å–∏–∑? –ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫–æ—Ä–∏–Ω–≥. HH:MM —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞ –±–æ–ª—Å–∏–Ω")

@dp.callback_query(lambda callback: callback.data.startswith("repeat_"))
async def set_alarm_repeat(callback: CallbackQuery):
    repeat_mode = callback.data.split("_")[1]
    alarm_time = user_temp_data[callback.from_user.id]["time"]
    if callback.from_user.id not in alarms:
        alarms[callback.from_user.id] = []
    alarms[callback.from_user.id].append({"time": alarm_time, "repeat": repeat_mode, "is_active": True, "has_rung": False})
    user_temp_data.pop(callback.from_user.id, None)
    await callback.message.answer(
        f"‚úÖ {alarm_time.strftime('%H:%M')} –≤–∞–∫—Ç–¥–∞, ({repeat_mode}) —á–∞–ª–∞–¥–∏–≥–∞–Ω –±—É–¥–∏–ª—å–Ω–∏–∫ –∫–æ—à–∏–ª–¥–∏!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ä–∫–∞–≥–∞", callback_data="main_menu")]
        ])
    )

@dp.callback_query(lambda callback: callback.data == "list_alarms")
async def list_alarms(callback: CallbackQuery):
    user_alarms = alarms.get(callback.from_user.id, [])
    if not user_alarms:
        await callback.message.edit_text("‚ùó –ù–∏—Ö—É—è –π–æ–∫.", reply_markup=create_main_menu())
        return

    text = "üï∞ –¢–≤–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏:\n"
    buttons = []
    for i, alarm in enumerate(user_alarms):
        if alarm['has_rung']:
            status = "‚úÖ –ß–∞–ª–¥–∏"
        elif not alarm['is_active']:
            status = "‚èπ –¢–æ—Ö—Ç–∞—Ç–∏–ª–¥–∏"
        else:
            status = "‚úÖ –ê–∫—Ç–∏–≤"
        text += f"{i + 1}. {alarm['time'].strftime('%H:%M')} ({alarm['repeat']}) {status}\n"
        buttons.append([InlineKeyboardButton(text=f"‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {alarm['time'].strftime('%H:%M')}", callback_data=f"edit_{i}")])

    buttons.append([InlineKeyboardButton(text="‚ùå –•–∞–º–º–∞—Å–∏–≥–∞ –¥–∏–Ω–∞—Ö—É", callback_data="delete_all_alarms")])
    buttons.append([InlineKeyboardButton(text="üîô –û—Ä–∫–∞–≥–∞", callback_data="main_menu")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(lambda callback: callback.data == "delete_all_alarms")
async def delete_all_alarms(callback: CallbackQuery):
    if callback.from_user.id in alarms:
        alarms[callback.from_user.id] = []
    await callback.message.edit_text("‚ùå –•–∞–º–º–∞—Å–∏–Ω–∏ –∫–æ—Ç–≥–∞ —Ç–∏–∫–¥–∏–∑.", reply_markup=create_main_menu())

@dp.message(Command("help"))
async def help_command(message: types.Message):
    text = (
        "‚ÑπÔ∏è –ö–æ–ª–∏–º–¥–∞–Ω —Ñ–∞–∫–∞—Ç —à—É –∫–µ–ª–∞–¥–∏:\n\n"
        "‚ûï –ú–µ–Ω—é –æ—Ä–∫–∞–ª–∏ —è–Ω–≥–∏ –±—É–¥–∏–ª—å–Ω–∏–∫ –∫–æ—à–∏—à\n"
        "üìú –ú–µ–Ω—é –æ—Ä–∫–∞–ª–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–ª–∞—Ä —Ä–æ–π—Ö–∞—Ç–∏–≥–∞ –∫–∞—Ä–∞—à\n"
        "‚èπ –ê–∫—Ç–∏–≤ –±—É–¥–∏–ª—å–Ω–∏–∫–Ω–∏ –æ—á–∏—Ä–º–∫\n\n"
        "–°–∞–≤–æ–ª–ª–∞—Ä –≤–∞ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä —É—á—É–Ω: @tokushu79"
    )
    await message.answer(text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
async def alarm_checker():
    while True:
        now = datetime.now(time_zone).time()
        for user_id, user_alarms in alarms.items():
            for i, alarm in enumerate(user_alarms):
                if alarm["is_active"] and now.hour == alarm['time'].hour and now.minute == alarm['time'].minute:
                    if user_id not in active_alarm_index:
                        active_alarm_index[user_id] = i
                        asyncio.create_task(send_alarm(user_id, i))
                        alarm['has_rung'] = True
        await asyncio.sleep(1)

async def send_alarm(user_id, alarm_index):
    while active_alarm_index.get(user_id) == alarm_index:
        await bot.send_message(user_id, "‚è∞ –û –µ–±–∞–Ω, —É–π–≥–æ–Ω–∏—à –≤–∞–∫—Ç–∏ –∫–µ–ª–¥–∏! –ß–∞–∫–∞–≥–∏–Ω–∏ –æ—á–∏—Ä–∏—à —É—á—É–Ω /stop –∂–æ–Ω–∞—Ç–∏–Ω–≥")
        await asyncio.sleep(3)

@dp.message(Command("stop"))
async def stop_alarm(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_alarm_index:
        alarm_index = active_alarm_index.pop(user_id)
        if alarm_index < len(alarms[user_id]):
            alarms[user_id][alarm_index]["is_active"] = False
        await message.answer(f"‚èπ –ë—É–¥–∏–ª—å–Ω–∏–∫ {alarm_index + 1} —Ç–æ—Ö—Ç–∞—Ç–∏–ª–¥–∏.", reply_markup=create_main_menu())
    else:
        await message.answer("‚ùó –°–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤ –±—É–¥–∏–ª—å–Ω–∏–∫–ª–∞—Ä –π–æ–∫.", reply_markup=create_main_menu())

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ Telegram
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ë–æ—Ç –±–∏–ª–∞–Ω –∏—à–ª–∞—à–Ω–∏ –±–æ—à–ª–∞"),
        BotCommand(command="list", description="–†–æ–π—Ö–∞—Ç–Ω–∏ –∫–æ—Ä—Å–∞—Ç"),
        BotCommand(command="help", description="–Å—Ä–¥–∞–º –±–µ—Ä–∏–Ω–≥")
    ]
    await bot.set_my_commands(commands)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await set_commands(bot)
    asyncio.create_task(alarm_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
